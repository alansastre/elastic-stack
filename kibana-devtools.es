
#===================================
# CAT COMMANDS
# https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html
#===================================

# See health status of elasticsearch 
GET _cat/health?v

#see all indices
GET _cat/indices?v

# see all documents in all indices of elasticsearch cluster
GET /_cat/count?v

# see all documents in all indices of elasticsearch cluster
GET /_cat/nodes?v

GET _cluster/health

#===================================
# INDEX APIS
# https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html
#===================================

#Create an index (initially empty)
PUT /customer

# retrieve information about an index
GET /customer
GET /customer/_search

# check if an index exists
HEAD /customer

#see number of documents stored in index
GET customer/_count

#Delete an index
DELETE /customer

#===================================
# DOCUMENTS API
# https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html
#===================================

# Retrieve documents from index
GET customer/_search

PUT customer/_doc/1
{
  "name": "John Doe"
}

# It will be indexed with an autogenerated id
POST /customer/_doc/
{
  "name": "Jack Sparrow"
}

# _create guarantees that the document is only indexed if it does not already exist
PUT /customer/_create/2
{
  "name": "Galimberti"
}

POST /customer/_create/3
{
  "name": "Alan Sastre"
}

PUT customer/_doc/4/_create
{
 "name": "Mary Shelley"
}

#Get indexed document by id
GET customer/_doc/1
GET customer/_doc/2

# check if a document exists by id
HEAD customer/_doc/1
GET customer/_source/1
HEAD customer/_source/1

# Update existent document in index
POST customer/_update/1
{
  "doc":{
    "name": "Rigatuso 2"
  }
}

#Reindex
POST _reindex
{
  "source": {
    "index": "customer"
  },
  "dest": {
    "index": "new_customer"
  }
}


# Retrieves multiple JSON documents by ID
GET /_mget
{
    "docs" : [
        {
            "_index" : "customer",
            "_id" : "1"
        },
        {
            "_index" : "customer",
            "_id" : "2"
        }
    ]
}

GET /customer/_mget
{
    "ids" : ["1", "2", "3"]
}

# Bulk API - Multiple operations in same request
POST _bulk
{ "index" : { "_index" : "customer", "_id" : "1" } }
{ "name" : "Rigatuso" }
{ "delete" : { "_index" : "customer", "_id" : "2" } }
{ "create" : { "_index" : "customer", "_id" : "3" } }
{ "name" : "Rodolfi" }
{ "update" : {"_id" : "1", "_index" : "customer"} }
{ "doc" : {"name" : "Alan Sastre"} }


# Delete a document in index by id
DELETE customer/_doc/1

# Delete all documents that match with the query
POST /customer/_delete_by_query
{
  "query": {
    "match": {
      "name": "Alan"
    }
  }
}

# retrieves document data without metadata
GET customer/_source/2

#===================================
# MAPPPINGS
# https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html
#===================================


GET customer/_mapping

DELETE customer 

# mapping 1
PUT /customer
{
  "mappings": {
    "properties": {
      "age":    { "type": "integer" },  
      "email":  { "type": "keyword"  }, 
      "name":   { "type": "text"  }  ,
      "birthDate":{
        "type":   "date",
        "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
      }
    }
  }
}

# mapping 2
PUT /customer
{
  "mappings": {
    "properties": {
      "age":    { "type": "integer" },  
      "email":  { "type": "text"  }, 
      "name":   { "type": "text"  }  ,
      "birthDate":{
        "type":   "date",
        "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
      }
    }
  }
}

PUT customer/_doc/1
{
  "name": "John Doe",
  "email": "johndoe@company.com",
  "age": 20,
  "birthDate": "2000-06-06"
}

PUT customer/_doc/2
{
  "name": "Raul Fiorito",
  "email": "raul@company.com",
  "age": 20,
  "birthDate": "2000-06-06"
}

GET customer/_search

GET customer/_search
{
   "query":{
      "match" : {
         "name": "John"
      }
   }
}

# check the difference between keyword and text data type
GET customer/_search
{
   "query":{
      "match" : {
         "email": "johndoe"
      }
   }
}

# PUT MAPPING API - https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html

PUT /customer/_mapping
{
  "properties": {
    "height": {
      "type": "integer"
    }
  }
}

GET customer/_mapping

PUT customer/_doc/3
{
  "name": "Fregilberto",
  "email": "fregil@company.com",
  "age": 20,
  "birthDate": "2000-06-06",
  "height": 120
}

GET customer/_search

DELETE customer 
#===================================
# QUERY DSL API 
# https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html
#===================================

# FIRST Insert data from json with Bulk API  from Postman or curl

GET /bank/_search
{
  "query": { "match_all": {} }
}
GET /bank/_search
{
  "query": { "match_all": {} },
  "sort": [
    { "account_number": "asc" }
  ]
}
GET /bank/_search
{
  "query": { "match_all": {} },
  "sort": [
    { "account_number": "asc" }
  ],
  "from": 10,
  "size": 10
}

GET /bank/_search
{
  "query": { "match": { "address": "mill lane" } }
}


GET /bank/_search
{
  "query": { "match_phrase": { "address": "mill lane" } }
}

GET /bank/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": { "age": "40" } }
      ],
      "must_not": [
        { "match": { "state": "ID" } }
      ]
    }
  }
}

GET /bank/_search
{
  "query": {
    "bool": {
      "must": { "match_all": {} },
      "filter": {
        "range": {
          "balance": {
            "gte": 20000,
            "lte": 30000
          }
        }
      }
    }
  }
}

# delete

GET /bank/_search?pretty
{
  "query": { "match_phrase": { "address": "mill lane" } }
}


POST /bank/_delete_by_query?pretty
{
  "query": {
     "match_phrase": { "address": "mill lane" }
  }
}

DELETE /bank
DELETE worker
#===================================
# SEARCH URI API 
# https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html
#===================================

DELETE bibliography
PUT bibliography
{
  "mappings": {
    "properties": {
      "author":{
        "type": "text"
      },
      "title":{
        "type": "text"
      },
      "year":{
         "type": "date",
         "format": "strict_date_optional_time||epoch_millis"
      },
      "price": {
        "type": "float"
      }
    }
  }
}
PUT bibliography/_doc/1
{
  "author": "William Gibson",
  "title": "Count Zero",
  "year": "1989",
  "price": 29.99
}

PUT bibliography/_doc/2
{
  "author": "Ken Follet",
  "title": "Los pilares de la Tierra",
  "year": "1818",
  "price": 29.99
}

GET bibliography/_search

GET bibliography/_search?q=author:William Gibson

GET bibliography/_search?q=!(author:"William Gibson")

GET bibliography/_search?q=year:1818

GET bibliography/_search?size=1

GET bibliography/_search?q=year:1818&_source=author,title

GET bibliography/_doc/2

GET bibliography/_search?_source=author

GET bibliography/_search?from=1


# Bulk API
POST bibliography/_bulk
{ "delete": {"_id":"1"}} 
{ "create": {"_id":"1"}}
{ "author": "Johan Wolfgang von Goethe", "title": "Die Leiden des jungen Werther", "year":"1774"}
{ "delete": {"_id":"2"}}
{ "create": {"_id":"2"}}
{ "author": "Umberto Eco", "title": "Il nome della rosa", "year":"1980"}
{ "delete": {"_id":"3"}}
{ "create": {"_id":"3"}}
{ "author": "Margaret Atwood", "title": "The Handmaid's Tale", "year":"1985"}
{ "delete": {"_id":"4"}}
{ "create": {"_id":"4"}}
{ "author": "Stillness is the key", "title": "Ryan Holiday", "year":"2019"}

GET bibliography/_search

PUT bibliography/_doc/1
{
  "author": "William Gibson",
  "title": "Count Zero",
  "year": "1989",
  "price": 29.99
}

PUT bibliography/_doc/2
{
  "author": "Mary Shelley",
  "title": "Frankestein",
  "year": "1818",
  "price": 19.99
}

PUT bibliography/_doc/3
{
  "author": "Ken Follet",
  "title": "Los pilares de la Tierra",
  "year": "1818",
  "price": 39.99
}

GET bibliography/_search
{
  "query" : {
      "bool" : {
        "must": {
          "match": {
            "author": "Ken Follet"
          }
        }
      }
    }
}

GET bibliography/_search
{
  "query" : {
      "bool" : {
        "filter": {
          "range": {
            "price": {
              "gte": 30
            }
          }
        }
      }
    }
}

GET bibliography/_search
{
    "query" : {
        "match_all" : {}
    },
    "sort" : {
        "price" : {
          "order": "desc"
        }
    }
}

# Only retrieve metainformation, but not information
GET bibliography/_search
{
    "_source": false, 
    "query" : {
        "match_all" : {}
    }
  
}


#===================================
# KIBANA SAMPLE DATA - Add it from http://localhost:5601/app/kibana#/home/tutorial_directory/sampleData
#===================================


GET kibana_sample_data_logs/_search

GET kibana_sample_data_logs/_mapping

GET kibana_sample_data_logs/_count

GET kibana_sample_data_logs/_search
{
    "query": {
        "match" : {
            "agent" : "Firefox"
        }
    }
}

GET kibana_sample_data_logs/_search
{
    "query": {
        "match_phrase" : {
            "machine.os": "win 8"
        }
    }
}

GET kibana_sample_data_logs/_search
{
    "query": {
        "match" : {
            "response": 503
        }
    }
}

GET kibana_sample_data_logs/_search
{
    "query": {
        "range" : {
            "timestamp" : {
                "gte" : "2020-01-26T00:00:00",
                "lte": "2020-01-26T04:00:00"
            }
        }
    }
}

GET kibana_sample_data_ecommerce/_search

GET kibana_sample_data_ecommerce/_mapping


GET kibana_sample_data_ecommerce/_search
{
    "query": {
        "match_phrase" : {
            "products.category": "Women's Clothing"
        }
    }
}


GET kibana_sample_data_flights/_search

GET kibana_sample_data_flights/_mapping

GET bitcoin-prices/_search

DELETE bitcoin-prices

GET bitcoin-prices/_mapping


#===================================
# LOGSTASH DATASETS 
# 1 - Create mappings
# 2 - Index data in ES with logstash
#===================================

# 1 - tesla stocks 

DELETE tesla-stock
GET tesla-stock/_search
GET tesla-stock/_mapping
PUT tesla-stock
{
  "mappings": {
    "properties": {
      "Low":{
        "type": "float"
      },
      "High":{
        "type": "float"
      },
      "Open":{
        "type": "float"
      },
      "Date":{
         "type": "date",
        "format": "yyyy-MM-dd"
      },
      "Close": {
        "type": "float"
      },
      "Volume": {
        "type": "float"
      }
    }
  }
}

# 2 - airbnb listings
GET airbnb/_search
GET airbnb/_mapping
DELETE airbnb

PUT airbnb
{
  "mappings": {
    "properties": {
      "id":{
        "type": "integer"
      },
      "name":{
        "type": "text"
      },
      "host_id":{
        "type": "integer"
      },
      "neighbourhood_group":{
         "type": "text"
    },
      "neighbourhood": {
        "type": "text"
      },
      "latitude": {
        "type": "float"
      },
      "longitude": {
        "type": "float"
      },
      "location": {
        "type": "geo_point"
      },
      "room_type":{
        "type": "text"
      },
      "price":{
        "type": "float"
      },
      "minimum_nights":{
        "type": "integer"
      },
      "number_of_reviews":{
         "type": "integer"
    },
      "last_review": {
         "type": "date",
        "format": "yyyy-MM-dd"
      },
      "reviews_per_month": {
        "type": "float"
      },
      "calculated_host_listings_count": {
        "type": "integer"
      },
      "availability_365": {
        "type": "integer"
      }
      
    }
  }
}

# 3 - house prices vs square feet 
PUT houseprices
{
  "mappings": {
    "properties": {
      "square-feet":{
        "type": "float"
      },
      "house-price":{
        "type": "float"
      }
    }
  }
}

GET houseprices/_search
GET houseprices/_mapping